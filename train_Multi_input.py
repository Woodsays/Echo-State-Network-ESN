# -*- coding: utf-8 -*-
"""
Created on Tue Aug  7 11:00:03 2018

@author: acerr
"""

import random
import numpy as np
import matplotlib as mpl
import matplotlib.pyplot as plt
import scipy
import scipy.linalg
from math import *
import image
from mpl_toolkits.mplot3d import Axes3D
from function import *
from ESN import *



timeshift=0


timeseries=np.load('timeseries generated by Reservoir.npy')
n_inputs=np.shape(timeseries[:30,:])[0]

# using 8000 of the timeseries to train , 2000 of the timeseries to test
input_train=timeseries[:30,12:8000-timeshift]
mutiEsn=ESN(n_inputs=n_inputs, n_outputs=1, ifplot=1, n_reservoir=100, sparsity=0.05)

output_target=timeseries[11,12+timeshift:8000]

input_valid=timeseries[:30,8000-timeshift:9000]
output_valid_true=timeseries[11,8000:9000+timeshift]

mutiEsn.initweights()
mutiEsn.update(input_train,1)
mutiEsn.allstate=discard(mutiEsn.allstate)  # optimal!!! 
output_target=discard(output_target)
mutiEsn.fit(input_train,output_target,0)
mutiEsn.predict(0)
plt.plot(mutiEsn.outputs,label='trainOut')
plt.plot(output_target,label='target')
mutiEsn.mydel(0)

mutiEsn.update(input_valid,0)
mutiEsn.allstate=discard(mutiEsn.allstate)
input_valid=discard(input_valid)
output_valid_true=discard(output_valid_true)
mutiEsn.predict(1)
plt.figure()
plt.plot(mutiEsn.outputs,label='outputs')
plt.plot(output_valid_true,label='true')
plt.legend()
plt.show()
